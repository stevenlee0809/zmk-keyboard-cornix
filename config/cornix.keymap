/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "zmk-helpers/helper.h"
#include "includes/cornix54.h"

// tap windows for ctl alt and gui

#define HM_TAPPING_TERM 250
#define HM_TAPPING_REPEAT 210

// quick tapping for shift

#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 70
#define BASE 0
#define WIN 1
#define LOWER 2
#define RAISE 3
#define ADJUST 4
#define NAVI   5
#define NUM    6
#define DEBUG  7

// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH1 LH0 RH0 RH1
#define KEYS_T LH1 LH0 RH0 RH1
#define ZMK_POINTING_DEFAULT_SCRL_VAL 15

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    // Activate ADJUST layer by pressing raise and lower

    behaviors {
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <KEYS_R KEYS_T 6 7 8 9 10 11 18 19 20 21 22 23 32 33 34 35 36 37 45 46 47 48 49 31 44>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <KEYS_L KEYS_T 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 30 38 39 40 41 42 43>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            //flavor = "balanced";

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;

            // for quick tapping; shift+~

            hold-trigger-on-release;
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };

        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            flavor = "hold-preferred";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "BASE";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp GRAVE     &kp Q      &kp W         &kp E               &kp R          &kp T                      &kp Y        &kp U          &kp I                &kp O         &kp P          &kp PRINTSCREEN
&kp CLCK      &kp A      &hm_l LALT S  &hm_l LEFT_SHIFT D  &hm_l LCTRL F  &kp G                      &kp H        &hm_r RCTRL J  &hm_r RIGHT_SHIFT K  &hm_r RALT L  &kp SEMICOLON  &kp INS
&kp LEFT_GUI  &kp Z      &kp X         &kp C               &kp V          &kp B        &none  &none  &kp N        &kp M          &kp COMMA            &kp DOT       &kp FSLH       &lt 5 RWIN
&kp LC(A)     &kp LC(C)  &kp LC(V)     &lt 1 ESCAPE        &lt 2 TAB      &lt 3 SPACE                &lt 4 ENTER  &kp BACKSPACE  &kp DEL              &none         &none          &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        nav_layer {
            bindings = <
&none  &none     &none     &none      &none      &none                &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none  &none
&none  &kp LGUI  &kp LALT  &kp LSHFT  &kp LCTRL  &none                &kp LEFT        &kp DOWN        &kp UP_ARROW  &kp RIGHT        &none  &none
&none  &none     &none     &none      &none      &none  &none  &none  &kp HOME        &kp PG_DN       &kp PG_UP     &kp END          &none  &none
&none  &none     &none     &none      &none      &none                &mkp LCLK       &mkp RCLK       &none         &none            &none  &none
            >;

            label = "NAV";
            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>,
                <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        num_layer {
            bindings = <
&none  &none     &none     &none      &none      &none                &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT   &none
&none  &kp LGUI  &kp LALT  &kp LSHFT  &kp LCTRL  &none                &kp GRAVE  &kp N4  &kp N5   &kp N6  &kp EQUAL  &none
&none  &none     &none     &none      &none      &none  &none  &none  &kp APOS   &kp N1  &kp N2   &kp N3  &kp BSLH   &none
&none  &none     &none     &none      &none      &none                &kp MINUS  &kp N0  &kp DOT  &none   &none      &none
            >;

            label = "NUM";
            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOL_DN>,
                <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        sym_layer {
            bindings = <
&none  &none     &none     &none      &none      &none                &kp LEFT_BRACE     &kp AMPERSAND         &kp ASTERISK           &kp LEFT_PARENTHESIS  &kp RIGHT_BRACE  &none
&none  &kp LGUI  &kp LALT  &kp LSHFT  &kp LCTRL  &none                &kp TILDE          &kp DOLLAR            &kp PERCENT            &kp CARET             &kp EQUAL        &none
&none  &none     &none     &none      &none      &none  &none  &none  &kp DOUBLE_QUOTES  &kp EXCLAMATION       &kp AT_SIGN            &kp HASH              &kp BSLH         &none
&none  &none     &none     &none      &none      &none                &kp UNDERSCORE     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none                 &none            &none
            >;

            label = "SYM";
            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOL_DN>,
                <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        Fn_layer {
            bindings = <
&kp LG(SPACE)  &kp F12  &kp F7  &kp F8  &kp F9  &none                &none  &none      &none      &none     &none     &none
&kp LC(LA(N))  &kp F11  &kp F4  &kp F5  &kp F6  &none                &none  &kp RCTRL  &kp RSHFT  &kp RALT  &kp RGUI  &none
&none          &kp F10  &kp F1  &kp F2  &kp F3  &none  &none  &none  &none  &none      &none      &none     &none     &none
&none          &none    &none   &none   &none   &none                &none  &none      &none      &none     &none     &none
            >;

            label = "Fn";
            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>,
                <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        conf_layer {
            bindings = <
&none  &bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3                &none  &none  &none  &none  &none  &none
&none  &none           &none         &none         &none         &none                       &none  &none  &none  &none  &none  &none
&none  &none           &none         &none         &none         &none         &none  &none  &none  &none  &none  &none  &none  &none
&none  &none           &none         &out OUT_USB  &out OUT_BLE  &sys_reset                  &none  &none  &none  &none  &none  &none
            >;

            label = "CONF";
        };
    };
};
